# Name of the workflow
name: Deploy Site

# Define when this workflow will run
on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    branches:
      - main  # Runs on pushes to the main branch

# Define environment variables that will be available to all jobs
env:
  AWS_REGION: 'us-east-1'  # Set the AWS region for deployment
  WEBSITE_URL: ${{ secrets.WEBSITE_URL }}  # URL of the website to verify after deployment

# Define the jobs that will run as part of this workflow
jobs:
  deploy:
    if: "contains(github.event.head_commit.message, 'deploy-site')"
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set a 30-minute timeout for the entire job

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3  # Use the latest stable version of the checkout action
      
      # Step 2: Make The Scripts Executabale
      - name: Make scripts executable
        run: |
          chmod +x ./bin/website-deploy.sh
          chmod +x ./bin/s3sync-files.sh

      # Step 3: Build and deploy the site
      - name: Build Site
        run: |
          ./bin/website-deploy.sh  # Run your custom deployment script
        env:
          # Set AWS credentials as environment variables
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 4: Verify the deployment
      - name: Verify deployment
        run: |
          echo "Waiting for 60 seconds before verification..."
          sleep 60
          
          echo "Verifying deployment at ${{ env.WEBSITE_URL }}"
          response=$(curl -L -s -o /dev/null -w "%{http_code}" --max-time 60 ${{ env.WEBSITE_URL }})
          echo "Received HTTP status code: $response"
          
          if [ "$response" = "200" ]; then
            echo "Deployment verified successfully"
          elif [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "Received a redirect. This might be expected if redirecting from HTTP to HTTPS."
            echo "Following redirect..."
            final_response=$(curl -L -s -o /dev/null -w "%{http_code}" --max-time 60 ${{ env.WEBSITE_URL }})
            echo "Final HTTP status code after redirect: $final_response"
            if [ "$final_response" = "200" ]; then
              echo "Deployment verified successfully after redirect"
            else
              echo "Deployment verification failed after redirect"
              exit 1
            fi
          else
            echo "Deployment verification failed"
            echo "Curl verbose output:"
            curl -v ${{ env.WEBSITE_URL }}
            exit 1
          fi