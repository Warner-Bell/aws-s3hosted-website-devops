# Name of the workflow
name: Deploy Site

# Define when this workflow will run
on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    branches:
      - main  # Runs on pushes to the main branch

# Define environment variables that will be available to all jobs
env:
  AWS_REGION: 'us-east-1'  # Set the AWS region for deployment
  WEBSITE_URL: ${{ secrets.WEBSITE_URL }}  # URL of the website to verify after deployment

# Define the jobs that will run as part of this workflow
jobs:
  deploy:
    if: "contains(github.event.head_commit.message, 'deploy-site')"
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Set a 30-minute timeout for the entire job

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3  # Use the latest stable version of the checkout action

      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3  # Use the latest stable version of the setup-node action
        with:
          node-version: '16'  # Use Node.js version 16

      # Step 3: Cache npm dependencies to speed up installation
      - name: Cache dependencies
        uses: actions/cache@v3  # Use the latest stable version of the cache action
        with:
          path: ~/.npm  # Specify the path to cache
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}  # Create a cache key based on OS and package-lock.json
          restore-keys: |
            ${{ runner.OS }}-node-  # Fallback to using the latest cache if no exact match is found

      # Step 4: Install project dependencies
      - name: Install dependencies
        run: npm ci  # Use 'ci' for clean install, respecting package-lock.json

      # Step 5: Build and deploy the site
      - name: Build Site
        run: |
          ./bin/website-deploy  # Run your custom deployment script
        env:
          # Set AWS credentials as environment variables
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Step 6: Verify the deployment
      - name: Verify deployment
        run: |
          # Use the WEBSITE_URL environment variable with a 30-second timeout
          response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 ${{ env.WEBSITE_URL }})
          if [ $response = "200" ]; then
            echo "Deployment verified successfully"
          else
            echo "Deployment verification failed"
            exit 1
          fi

      